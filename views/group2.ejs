<!DOCTYPE html>
<head>
    <title></title>
    <link rel="stylesheet" href="/style.css">
</head>
<body>

    <div class="app">
        <div id="left">
            <div class="launch-time">
               
                
                <div>
                    <p id="minutes">00</p>
                    <span>Minutes</span>
                </div>
                <div>
                    <p id="seconds">00</p>
                    <span>Seconds</span>
                </div>
            </div>
            
            <h1>Simple Quiz</h1>
            <div class="quiz">
                <h2 id="question">Question</h2>
        
                <div id="answer-buttons">
                    <button id="btn-one" class="btn">Answer 1</button>
                    <button id="two" class="btn">Answer 2</button>
                    <button id="three" class="btn">Answer 3</button>
                    <button id="four" class="btn">Answer 4</button>
                </div>

                <button id="next-btn">Next</button>
                <button id="submit-quiz">Submit</a>
            </div>
        </div>
        <div id="right">
            
            
            <div id="app">
                <div id="chat-container">
        
                </div>
                <form id="chatgpt">
                    <textarea name="prompt" rows="1" cols="1" placeholder="ask..."></textarea>
                    <button type="submit">Submit</button>
                </form>
            </div>
        </div>
        
        
    </div>
        
            <script src="/socket.io/socket.io.js"></script>

            <script> var roomValue = group.group;
                window.room = group.group;
                console.log('window room set ', window.room);</script>
        
            <script src="script.js"></script>

    <script>
        /*var roomValue = group.group;
        //window.room = '<%= group.group%>';
        window.room = group.group;
        console.log('window room set ', window.room);
        */
        /*
        console.log('from script tag of group1')

var socket = io('http://localhost:3000');

let canvas = document.getElementById("canvas");

let messageForm = document.getElementById('send-container');
let messageInput = document.getElementById("message-input");
let messageContainer = document.getElementById('message-container');



const name = prompt('What is your name');
appendMessage('You joined');

socket.emit('new-user', name);

socket.on('chat-message', data => {
    appendMessage(`${data.name}: ${data.message}`);
})

socket.on('user-connected', name => {
    appendMessage(`${name} connected`);
})

messageForm.addEventListener("submit", e => {
    e.preventDefault();
    const message = messageInput.value;
    appendMessage(`You: ${message}`);
    socket.emit('send-chat-message', message);
    messageInput.value = '';
})

function appendMessage(message){
    const messageElement = document.createElement('div');
    messageElement.innerText = message;
    messageContainer.append(messageElement);
}

canvas.width = (0.5) * window.innerWidth;
canvas.height = (0.5) * window.innerHeight;

let ctx = canvas.getContext("2d");

let x;
let y;
let mouseDown = false;

window.onmousedown = (e) => {
    ctx.moveTo(x, y);
    socket.emit('down', {x, y});
    mouseDown = true;
}

window.onmouseup = (e) => {
    mouseDown = false;
}

socket.on('ondraw', ({x, y}) => {
    ctx.lineTo(x, y);
    ctx.stroke();
})

socket.on('ondown', ({x, y}) => {
    ctx.moveTo(x, y);
})

window.onmousemove = (e) => {
    x = e.clientX;
    y = e.clientY;

    if(mouseDown){
        socket.emit('draw', {x, y})
        ctx.lineTo(x, y);
    ctx.stroke();
    }
}

//ctx.moveTo(100, 100);
//ctx.lineTo(200, 200);
//ctx.stroke();


const questionElement = document.getElementById("question");
const answerButtons = document.getElementById("answer-buttons");
const nextButton = document.getElementById("next-btn");

console.log('question element+', questionElement);
console.log('answer element+', answerButtons);
console.log('next button +', nextButton);

let currentQuestionIndex = 0;
let score = 0;


const room = 'group1';

    socket.emit('join', {room});    
    console.log('client tries to join group 1');


socket.on('loadQuestions', (questions) => {
    startQuiz(questions);
    socket.emit('resetScore', score);
})

function resetState(){
    nextButton.style.display = "none";
    while(answerButtons.firstChild){
        answerButtons.removeChild(answerButtons.firstChild);
    }
}

function startQuiz(questions){    
    score = 0;
    nextButton.innerHTML = "Next";
    showQuestion(questions);      
}

function showQuestion(questions){
    resetState();

    console.log('Question: ',questions[currentQuestionIndex]);

    let currentQuestion = questions[currentQuestionIndex];
    let questionNo = currentQuestionIndex + 1;
    questionElement.innerHTML = questionNo + "." + currentQuestion.question;

    for(let i = 0; i < currentQuestion.answers.length; i++) {
        const answer = currentQuestion.answers[i];
        const button = document.createElement("button");
        button.innerHTML = answer.text;
        button.classList.add("btn");
        if (i == 0){
            button.setAttribute("id", "one")
        } else if (i == 1) {
            button.setAttribute("id", "two");
        } else if (i == 2){
            button.setAttribute("id", "three")
        }  else {
            button.setAttribute("id", "four");
        }
        answerButtons.appendChild(button);

        if(answer.correct){
            button.dataset.correct = answer.correct;
    }
        button.addEventListener("click", selectAnswer);
}
    };
    

function selectAnswer(e){
      
    const selectedBtn = e.target;
    const isCorrect = selectedBtn.dataset.correct === "true";

    if (isCorrect){
        selectedBtn.classList.add("correct");
        //score++;
    } else {
        selectedBtn.classList.add("incorrect");
    }    
    
    Array.from(answerButtons.children).forEach(button => {
        if(button.dataset.correct === "true"){
            button.classList.add("correct");
        }
        button.disabled = true;
    })
    nextButton.style.display = "block";
    nextButton.addEventListener("click", handleNextButton);

    const answerData = {
        selectedAnswer: selectedBtn.innerHTML,
        isCorrect: isCorrect
    }

    console.log('Before emitting score for 1');
    socket.emit('updateScore', (isCorrect));

    socket.emit('answer', {selectedAnswer: selectedBtn.innerHTML,
        isCorrect: isCorrect, buttonId: selectedBtn.id, room, myClass: "btn"})   
}

socket.on('updateAnswer', ({selectedAnswer, buttonId, isCorrect, myClass}) => {
    console.log('inside update Answer');
    
    let chosenButton = document.getElementById(buttonId);
    let allButtons = document.getElementsByClassName(myClass);
    
   
    if (isCorrect){
        chosenButton.classList.add("correct");
        //score++;
    } else {
        chosenButton.classList.add("incorrect");
    }

    Array.from(allButtons).forEach(button => {
        if(button.dataset.correct === "true"){
            button.classList.add("correct");
        }
        button.disabled = true;
    })
    nextButton.style.display = "block";
    

})


function handleNextButton(){
    
    console.log('handle next button function');
    currentQuestionIndex++;            
    console.log('current Question index ', currentQuestionIndex);

    theNextButtonId = "next-btn";
    socket.emit('buttonClicked', {theNextButtonId, room})
    

    nextButtonId = document.getElementById("next-btn");
    socket.emit('handling-next-button', {currentQuestionIndex, room, theNextButtonId});


    socket.on('loadQuestions', (questions) => {
        console.log('In netxbutton load questions option');
        showQuestion(questions);       
        
           }       );

            
           socket.on('score', (data) => {
            console.log('in score option');
            console.log('the score is ', data.score);
            showScore(data.score, data.questions);        
           

           })
          
            }
        
            
function showScore(score, questions){
    resetState();
    //score = 0;
    questionElement.innerHTML = `You socred ${score } out of ${questions.length}`;
    //nextButton.innerHTML = "Submit";
    //nextButton.style.display = "block";  
    let submitQuiz = document.getElementById("submit-quiz");
    submitQuiz.style.display = "block";

    
    currentQuestionIndex = -1;
    score = 0; 
}



socket.on('updateUi', (data) => {
    console.log('in update Ui method');
    
    document.getElementById(data.theNextButtonId).click();
    
    currentQuestionIndex++; 
    socket.emit('handling-next-button', {currentQuestionIndex, room});
    

    socket.on('loadQuestions', (questions) => {
        console.log('In netxbutton load questions option');
        showQuestion(questions);       
        
           }       );

            
           socket.on('score', (data) => {
            console.log('in socre option');
            showScore(data.score, data.questions);

           })
})

socket.on('user-disconnected', name => {
    appendMessage(`${name} disconnected`);
})
*/

    </script>
</body>
</html>